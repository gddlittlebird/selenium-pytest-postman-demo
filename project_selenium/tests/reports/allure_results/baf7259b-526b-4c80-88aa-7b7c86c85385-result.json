{"name": "test_create_order[user0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x81fd33+62915]\n\tGetHandleVerifier [0x0x81fd74+62980]\n\t(No symbol) [0x0x653e13]\n\t(No symbol) [0x0x69c89e]\n\t(No symbol) [0x0x69cc3b]\n\t(No symbol) [0x0x6e4ec2]\n\t(No symbol) [0x0x6c1424]\n\t(No symbol) [0x0x6e26ea]\n\t(No symbol) [0x0x6c11d6]\n\t(No symbol) [0x0x690833]\n\t(No symbol) [0x0x6916a4]\n\tGetHandleVerifier [0x0xa88d23+2590131]\n\tGetHandleVerifier [0x0xa83f6a+2570234]\n\tGetHandleVerifier [0x0x8459ea+217722]\n\tGetHandleVerifier [0x0x836058+153832]\n\tGetHandleVerifier [0x0x83c4bd+179533]\n\tGetHandleVerifier [0x0x827738+94152]\n\tGetHandleVerifier [0x0x8278c2+94546]\n\tGetHandleVerifier [0x0x812bda+9322]\n\tBaseThreadInitThunk [0x0x75fb5d49+25]\n\tRtlInitializeExceptionChain [0x0x7777d1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7777d131+561]", "trace": "self = <tests.test_order.TestOrder object at 0x050AD318>\nuser = {'customer_name': 'Customer0222', 'password': 'abc123456', 'product_name': '加拿大海运', 'username': 'alltester_勿动'}\n\n    @pytest.mark.parametrize(\"user\", load_csv_data(\"users.csv\"))\n    def test_create_order(self, user):\n        \"\"\"\n        多用户创建预报单测试，使用 CSV 中的数据驱动。\n        user 是字典，包含 username、password、customer_name、product_name\n        \"\"\"\n        # 1. 登录\n        login_page = LoginPage(self.driver)\n        start_time = time.time()\n        login_page.login_with_credentials(user[\"username\"], user[\"password\"])\n        login_elapsed = time.time() - start_time\n    \n        assert login_page.is_welcome_shown(user[\"username\"]) is True\n        print(f\"用户 {user['username']} 登录耗时: {login_elapsed:.2f}秒\")\n    \n        # 2. 创建预报单\n        order_page = ForecastPage(self.driver)\n        file_path = r\"D:\\project_selenium_improve\\tests\\16箱.xlsx\"\n    \n        start_time = time.time()\n>       order_page.create_order(\n            file_path=file_path,\n            customer_name=user[\"customer_name\"],\n            product_name=user[\"product_name\"]\n        )\n\ntest_order.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\order_page.py:83: in create_order\n    target_customer = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"20916f6ba9392f38a7516dce8b58b65b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x050E9488>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x81fd33+62915]\nE       \tGetHandleVerifier [0x0x81fd74+62980]\nE       \t(No symbol) [0x0x653e13]\nE       \t(No symbol) [0x0x69c89e]\nE       \t(No symbol) [0x0x69cc3b]\nE       \t(No symbol) [0x0x6e4ec2]\nE       \t(No symbol) [0x0x6c1424]\nE       \t(No symbol) [0x0x6e26ea]\nE       \t(No symbol) [0x0x6c11d6]\nE       \t(No symbol) [0x0x690833]\nE       \t(No symbol) [0x0x6916a4]\nE       \tGetHandleVerifier [0x0xa88d23+2590131]\nE       \tGetHandleVerifier [0x0xa83f6a+2570234]\nE       \tGetHandleVerifier [0x0x8459ea+217722]\nE       \tGetHandleVerifier [0x0x836058+153832]\nE       \tGetHandleVerifier [0x0x83c4bd+179533]\nE       \tGetHandleVerifier [0x0x827738+94152]\nE       \tGetHandleVerifier [0x0x8278c2+94546]\nE       \tGetHandleVerifier [0x0x812bda+9322]\nE       \tBaseThreadInitThunk [0x0x75fb5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7777d1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7777d131+561]\n\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "\n        多用户创建预报单测试，使用 CSV 中的数据驱动。\n        user 是字典，包含 username、password、customer_name、product_name\n        ", "attachments": [{"name": "log", "source": "0e1b4d05-5ba0-4952-bab8-0c0a2dd516cb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user", "value": "{'username': 'alltester_勿动', 'password': 'abc123456', 'customer_name': 'Customer0222', 'product_name': '加拿大海运'}"}], "start": 1755070555850, "stop": 1755070575629, "uuid": "fd4eee51-aed1-44c3-b089-fdefd16309e8", "historyId": "622e9a6a8e259ac9f4ec7d8f6fd59f5f", "testCaseId": "b0fdcacb323511d8194c939b7ce8433a", "fullName": "tests.test_order.TestOrder#test_create_order", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "DESKTOP-I66F8NN"}, {"name": "thread", "value": "18304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order"}]}