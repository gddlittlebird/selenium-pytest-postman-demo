{"name": "test_create_order[user0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=139.0.7258.66)\nStacktrace:\n\tGetHandleVerifier [0x0x81fd33+62915]\n\tGetHandleVerifier [0x0x81fd74+62980]\n\t(No symbol) [0x0x653c70]\n\t(No symbol) [0x0x694077]\n\t(No symbol) [0x0x6c13dc]\n\t(No symbol) [0x0x691ff4]\n\t(No symbol) [0x0x6c1654]\n\t(No symbol) [0x0x6e26ea]\n\t(No symbol) [0x0x6c11d6]\n\t(No symbol) [0x0x690833]\n\t(No symbol) [0x0x6916a4]\n\tGetHandleVerifier [0x0xa88d23+2590131]\n\tGetHandleVerifier [0x0xa83f6a+2570234]\n\tGetHandleVerifier [0x0x8459ea+217722]\n\tGetHandleVerifier [0x0x836058+153832]\n\tGetHandleVerifier [0x0x83c4bd+179533]\n\tGetHandleVerifier [0x0x827738+94152]\n\tGetHandleVerifier [0x0x8278c2+94546]\n\tGetHandleVerifier [0x0x812bda+9322]\n\tBaseThreadInitThunk [0x0x75fb5d49+25]\n\tRtlInitializeExceptionChain [0x0x7777d1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7777d131+561]", "trace": "self = <tests.test_order.TestOrder object at 0x04F9D408>\nuser = {'customer_name': '客户0730', 'password': 'abc123456', 'product_name': '美森正班超大件', 'username': 'alltester_勿动'}\n\n    @pytest.mark.parametrize(\"user\", load_csv_data(\"users.csv\"))\n    def test_create_order(self, user):\n        \"\"\"\n        多用户创建预报单测试，使用 CSV 中的数据驱动。\n        user 是字典，包含 username、password、customer_name、product_name\n        \"\"\"\n        # 1. 登录\n        login_page = LoginPage(self.driver)\n        start_time = time.time()\n        login_page.login_with_credentials(user[\"username\"], user[\"password\"])\n        login_elapsed = time.time() - start_time\n    \n        assert login_page.is_welcome_shown(user[\"username\"]) is True\n        print(f\"用户 {user['username']} 登录耗时: {login_elapsed:.2f}秒\")\n    \n        # 2. 创建预报单\n        order_page = ForecastPage(self.driver)\n        file_path = r\"D:\\project_selenium_improve\\tests\\16箱.xlsx\"\n    \n        start_time = time.time()\n>       order_page.create_order(\n            file_path=file_path,\n            customer_name=user[\"customer_name\"],\n            product_name=user[\"product_name\"]\n        )\n\ntest_order.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\order_page.py:104: in create_order\n    product_input.clear()\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x04F9D378>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7777d1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7777d131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=139.0.7258.66)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x81fd33+62915]\nE       \tGetHandleVerifier [0x0x81fd74+62980]\nE       \t(No symbol) [0x0x653c70]\nE       \t(No symbol) [0x0x694077]\nE       \t(No symbol) [0x0x6c13dc]\nE       \t(No symbol) [0x0x691ff4]\nE       \t(No symbol) [0x0x6c1654]\nE       \t(No symbol) [0x0x6e26ea]\nE       \t(No symbol) [0x0x6c11d6]\nE       \t(No symbol) [0x0x690833]\nE       \t(No symbol) [0x0x6916a4]\nE       \tGetHandleVerifier [0x0xa88d23+2590131]\nE       \tGetHandleVerifier [0x0xa83f6a+2570234]\nE       \tGetHandleVerifier [0x0x8459ea+217722]\nE       \tGetHandleVerifier [0x0x836058+153832]\nE       \tGetHandleVerifier [0x0x83c4bd+179533]\nE       \tGetHandleVerifier [0x0x827738+94152]\nE       \tGetHandleVerifier [0x0x8278c2+94546]\nE       \tGetHandleVerifier [0x0x812bda+9322]\nE       \tBaseThreadInitThunk [0x0x75fb5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7777d1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7777d131+561]\n\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "description": "\n        多用户创建预报单测试，使用 CSV 中的数据驱动。\n        user 是字典，包含 username、password、customer_name、product_name\n        ", "attachments": [{"name": "log", "source": "858ecccb-0bec-48da-b9f2-bcdc0b7062bd-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user", "value": "{'username': 'alltester_勿动', 'password': 'abc123456', 'customer_name': '客户0730', 'product_name': '美森正班超大件'}"}], "start": 1755071330255, "stop": 1755071342119, "uuid": "1a5c8d22-7011-4199-ab4d-1b4396c8c87e", "historyId": "bf9cef801c5dfb695dc07871e042306f", "testCaseId": "b0fdcacb323511d8194c939b7ce8433a", "fullName": "tests.test_order.TestOrder#test_create_order", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "DESKTOP-I66F8NN"}, {"name": "thread", "value": "27620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order"}]}