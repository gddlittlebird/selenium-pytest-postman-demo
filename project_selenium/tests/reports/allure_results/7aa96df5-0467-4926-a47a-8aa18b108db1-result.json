{"name": "test_login_performance[user_data0]", "status": "broken", "statusDetails": {"message": "RuntimeError: 浏览器启动失败: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n\tGetHandleVerifier [0x0xd0ba83+63395]\n\tGetHandleVerifier [0x0xd0bac4+63460]\n\t(No symbol) [0x0xb52113]\n\t(No symbol) [0x0xb858b8]\n\t(No symbol) [0x0xb811a9]\n\t(No symbol) [0x0xbcae57]\n\t(No symbol) [0x0xbca74a]\n\t(No symbol) [0x0xbbf1a6]\n\t(No symbol) [0x0xb8e7b2]\n\t(No symbol) [0x0xb8f654]\n\tGetHandleVerifier [0x0xf88883+2672035]\n\tGetHandleVerifier [0x0xf83cba+2652634]\n\tGetHandleVerifier [0x0xd32bca+223466]\n\tGetHandleVerifier [0x0xd22cb8+158168]\n\tGetHandleVerifier [0x0xd2978d+185517]\n\tGetHandleVerifier [0x0xd13b78+96408]\n\tGetHandleVerifier [0x0xd13d02+96802]\n\tGetHandleVerifier [0x0xcfe90a+9770]\n\tBaseThreadInitThunk [0x0x76ff5d49+25]\n\tRtlInitializeExceptionChain [0x0x7786d1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7786d131+561]", "trace": "self = <core.browser_manager.BrowserManager object at 0x052575D0>, browser_type = 'chrome'\n\n    def start_browser(self,browser_type=\"chrome\"):\n        \"\"\"\n        启动浏览器\n        默认启动Chrome。\n        \"\"\"\n        try:\n            print(f\"正在启动浏览器\")\n            self.logger.info(\"正在启动Chrom浏览器(自我驱动管理)...\")\n            #print(f\"无头模式状态: {self.headless_mode}\")\n    \n            #启动Chrome浏览器服务\n            service = ChromeService(executable_path=ChromeDriverManager().install())\n            #创建 webDriver 实例\n>           driver = webdriver.Chrome(service=service, options=self.options)\n\n..\\core\\browser_manager.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x05279D38>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7786d1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7786d131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xd0ba83+63395]\nE       \tGetHandleVerifier [0x0xd0bac4+63460]\nE       \t(No symbol) [0x0xb52113]\nE       \t(No symbol) [0x0xb858b8]\nE       \t(No symbol) [0x0xb811a9]\nE       \t(No symbol) [0x0xbcae57]\nE       \t(No symbol) [0x0xbca74a]\nE       \t(No symbol) [0x0xbbf1a6]\nE       \t(No symbol) [0x0xb8e7b2]\nE       \t(No symbol) [0x0xb8f654]\nE       \tGetHandleVerifier [0x0xf88883+2672035]\nE       \tGetHandleVerifier [0x0xf83cba+2652634]\nE       \tGetHandleVerifier [0x0xd32bca+223466]\nE       \tGetHandleVerifier [0x0xd22cb8+158168]\nE       \tGetHandleVerifier [0x0xd2978d+185517]\nE       \tGetHandleVerifier [0x0xd13b78+96408]\nE       \tGetHandleVerifier [0x0xd13d02+96802]\nE       \tGetHandleVerifier [0x0xcfe90a+9770]\nE       \tBaseThreadInitThunk [0x0x76ff5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7786d1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7786d131+561]\n\nD:\\Python312-32\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturedef = <FixtureDef argname='browser' scope='function' baseid='tests'>\nrequest = <SubRequest 'browser' for <Function test_login_performance[user_data0]>>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_fixture_setup(fixturedef: FixtureDef, request) -> object | None:\n        asyncio_mode = _get_asyncio_mode(request.config)\n        if not _is_asyncio_fixture_function(fixturedef.func):\n            if asyncio_mode == Mode.STRICT:\n                # Ignore async fixtures without explicit asyncio mark in strict mode\n                # This applies to pytest_trio fixtures, for example\n>               return (yield)\n\nD:\\Python312-32\\Lib\\site-packages\\pytest_asyncio\\plugin.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:7: in browser\n    driver = browser.start_browser()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.browser_manager.BrowserManager object at 0x052575D0>, browser_type = 'chrome'\n\n    def start_browser(self,browser_type=\"chrome\"):\n        \"\"\"\n        启动浏览器\n        默认启动Chrome。\n        \"\"\"\n        try:\n            print(f\"正在启动浏览器\")\n            self.logger.info(\"正在启动Chrom浏览器(自我驱动管理)...\")\n            #print(f\"无头模式状态: {self.headless_mode}\")\n    \n            #启动Chrome浏览器服务\n            service = ChromeService(executable_path=ChromeDriverManager().install())\n            #创建 webDriver 实例\n            driver = webdriver.Chrome(service=service, options=self.options)\n    \n            #注入 JS 脚本，将 navigator.webdriver 设置为 undefined\n            driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n                \"source\": \"\"\"\n                           Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\n                       \"\"\"\n            })\n    \n            print(\"Chrome启动成功！\")\n    \n            #把局部driver 赋值给self.driver\n            self.driver = driver\n            #智能等待，元素是否出现在页面上并且是可见的，最多等待10S。\n            self.wait = WebDriverWait(self.driver, 10)\n    \n            return self.driver\n    \n        except Exception as e:\n            import traceback\n            traceback.print_exc()\n>           raise RuntimeError(f\"浏览器启动失败: {str(e)}\")\nE           RuntimeError: 浏览器启动失败: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0xd0ba83+63395]\nE           \tGetHandleVerifier [0x0xd0bac4+63460]\nE           \t(No symbol) [0x0xb52113]\nE           \t(No symbol) [0x0xb858b8]\nE           \t(No symbol) [0x0xb811a9]\nE           \t(No symbol) [0x0xbcae57]\nE           \t(No symbol) [0x0xbca74a]\nE           \t(No symbol) [0x0xbbf1a6]\nE           \t(No symbol) [0x0xb8e7b2]\nE           \t(No symbol) [0x0xb8f654]\nE           \tGetHandleVerifier [0x0xf88883+2672035]\nE           \tGetHandleVerifier [0x0xf83cba+2652634]\nE           \tGetHandleVerifier [0x0xd32bca+223466]\nE           \tGetHandleVerifier [0x0xd22cb8+158168]\nE           \tGetHandleVerifier [0x0xd2978d+185517]\nE           \tGetHandleVerifier [0x0xd13b78+96408]\nE           \tGetHandleVerifier [0x0xd13d02+96802]\nE           \tGetHandleVerifier [0x0xcfe90a+9770]\nE           \tBaseThreadInitThunk [0x0x76ff5d49+25]\nE           \tRtlInitializeExceptionChain [0x0x7786d1ab+107]\nE           \tRtlGetAppContainerNamedObjectPath [0x0x7786d131+561]\n\n..\\core\\browser_manager.py:102: RuntimeError"}, "description": "\n    测试多个用户登录的响应时间，确保在可接受的范围内\n    每个用户从users.csv文件中读取，并记录其登录耗时。\n    若登录失败，将截图并写入日志。\n    ", "attachments": [{"name": "log", "source": "83f62916-df2c-4ee8-9372-7001ce4ec68f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user_data", "value": "{'username': '勿动_IFace_测试', 'password': 'abc123456'}"}], "start": 1754631142374, "stop": 1754631142374, "uuid": "2e7f6acf-6bd0-436d-a9ed-8e4dc9308702", "historyId": "ab4326ee743d6cf5e0fcfd591a80a41f", "testCaseId": "41a98be2e5ba8dfd29fb449496735cd9", "fullName": "tests.test_login_performance#test_login_performance", "labels": [{"name": "feature", "value": "登录性能测试"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_performance"}, {"name": "host", "value": "DESKTOP-I66F8NN"}, {"name": "thread", "value": "24772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_performance"}]}