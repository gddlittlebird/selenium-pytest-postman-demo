{"name": "test_login_performance[user_data0]", "status": "broken", "statusDetails": {"message": "RuntimeError: 浏览器启动失败: 'BrowserManager' object has no attribute 'options'", "trace": "self = <core.browser_manager.BrowserManager object at 0x0538E738>\nbrowser_type = 'chrome'\n\n    def start_browser(self,browser_type=\"chrome\"):\n        \"\"\"启动浏览器\"\"\"\n        try:\n            self._create_user_data_dir()\n>           options = self._setup_options()\n\n..\\core\\browser_manager.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.browser_manager.BrowserManager object at 0x0538E738>\n\n    def _setup_options(self):\n        \"\"\"配置浏览器选项\"\"\"\n        options = Options()\n        options.add_argument(f\"--user-data-dir={self.user_data_dir}\")\n    \n        #启动时最大化窗口\n>       self.options.add_argument(\"--start-maximized\")\nE       AttributeError: 'BrowserManager' object has no attribute 'options'\n\n..\\core\\browser_manager.py:52: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturedef = <FixtureDef argname='browser' scope='function' baseid='tests'>\nrequest = <SubRequest 'browser' for <Function test_login_performance[user_data0]>>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_fixture_setup(fixturedef: FixtureDef, request) -> object | None:\n        asyncio_mode = _get_asyncio_mode(request.config)\n        if not _is_asyncio_fixture_function(fixturedef.func):\n            if asyncio_mode == Mode.STRICT:\n                # Ignore async fixtures without explicit asyncio mark in strict mode\n                # This applies to pytest_trio fixtures, for example\n>               return (yield)\n\nD:\\Python312-32\\Lib\\site-packages\\pytest_asyncio\\plugin.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:20: in browser\n    driver = manager.start_browser()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.browser_manager.BrowserManager object at 0x0538E738>\nbrowser_type = 'chrome'\n\n    def start_browser(self,browser_type=\"chrome\"):\n        \"\"\"启动浏览器\"\"\"\n        try:\n            self._create_user_data_dir()\n            options = self._setup_options()\n            self.logger.info(f\"启动Chrome(自我驱动管理),用户数据目录:{self.user_data_dir}\")\n            print(f\"启动Chrome,用户数据目录:{self.user_data_dir}\")\n            # print(f\"无头模式状态: {self.headless_mode}\")\n    \n            # 启动Chrome浏览器服务\n            service = ChromeService(executable_path=ChromeDriverManager().install())\n            # 创建 webDriver 实例\n            driver = webdriver.Chrome(service=service, options=self.options)\n    \n            # 注入 JS 脚本，将 navigator.webdriver 设置为 undefined\n            driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n                \"source\": \"\"\"\n                                       Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\n                                   \"\"\"\n            })\n    \n    \n            #把局部driver 赋值给self.driver\n            self.driver = driver\n            #智能等待，元素是否出现在页面上并且是可见的，最多等待10S。\n            self.wait = WebDriverWait(self.driver, 10)\n    \n            print(\"Chrome启动成功！\")\n            self.logger.info(\"Chrome启动成功！\")\n    \n            return self.driver\n    \n        except Exception as e:\n            self.logger.error(f\"浏览器启动失败:{e}\",exc_info=True)\n            self._cleanup_user_data_dir()\n>           raise RuntimeError(f\"浏览器启动失败: {str(e)}\")\nE           RuntimeError: 浏览器启动失败: 'BrowserManager' object has no attribute 'options'\n\n..\\core\\browser_manager.py:113: RuntimeError"}, "description": "\n    1. 通过参数化读取 CSV 中的多个用户账户和密码。\n    2. 使用传入的 browser fixture 启动浏览器实例。\n    3. 调用登录页面的 login_with_credentials 方法执行登录。\n    4. 记录登录操作的响应时间，方便性能评估。\n    5. 登录失败时截图并抛出异常，确保测试失败可追踪。\n    ", "attachments": [{"name": "log", "source": "33ddc7e3-d895-4fdb-9604-9a217cf1e484-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user_data", "value": "{'username': 'alltester_勿动', 'password': 'abc123456'}"}], "start": 1754978885440, "stop": 1754978885440, "uuid": "24cdfafd-c8a2-4dbe-8f80-d66c88315766", "historyId": "110335e58656d9c8e02e7783c2637bf0", "testCaseId": "41a98be2e5ba8dfd29fb449496735cd9", "fullName": "tests.test_login_performance#test_login_performance", "labels": [{"name": "feature", "value": "登录性能测试"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_performance"}, {"name": "host", "value": "DESKTOP-I66F8NN"}, {"name": "thread", "value": "14408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_performance"}]}